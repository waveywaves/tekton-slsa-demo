apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: PIPELINE_RUN_NAME
  namespace: default
  labels:
    slsa-demo: "true"
    deployment: "sample-app"
spec:
  taskRunTemplate:
    serviceAccountName: SERVICE_ACCOUNT
  pipelineSpec:
    params:
    - name: IMAGE_NAME
      description: Name of the application image
      default: "ttl.sh/tekton-slsa-demo"
    - name: IMAGE_TAG
      description: Tag for the application image
      default: "IMAGE_TAG_VALUE"
    - name: SOURCE_URL
      description: Source repository URL
      default: "https://github.com/waveywaves/tekton-slsa-demo"
    results:
    - name: IMAGE_URL
      description: URL of the built image
      value: $(tasks.build-app.results.IMAGE_URL)
    - name: IMAGE_DIGEST
      description: Digest of the built image
      value: $(tasks.build-app.results.IMAGE_DIGEST)
    workspaces:
    - name: shared-data
      description: Shared workspace for source code
    tasks:
    - name: prepare-source
      taskSpec:
        workspaces:
        - name: source
        steps:
        - name: setup
          image: alpine/git:2.36.3
          workingDir: $(workspaces.source.path)
          script: |
            #!/bin/sh
            set -ex
            echo "=== Preparing source code ==="
            # Copy actual source files if they exist, otherwise create demo app
            if [ -d "/workspace/source/cmd" ]; then
              echo "Using existing source code"
            else
              echo "Creating demo Go application..."
              mkdir -p cmd
              cp -r /workspace/source/* . 2>/dev/null || true
            fi
            echo "Source preparation completed"
      workspaces:
      - name: source
        workspace: shared-data
    - name: source-scan
      runAfter: ["prepare-source"]
      taskSpec:
        params:
        - name: SOURCE_URL
        steps:
        - name: scan
          image: alpine:3.18
          script: |
            #!/bin/sh
            set -ex
            echo "üîç Scanning source code for vulnerabilities..."
            echo "Source URL: $(params.SOURCE_URL)"
            echo "Performing security checks..."
            sleep 2
            echo "‚úÖ Source scan completed - no critical issues found"
      params:
      - name: SOURCE_URL
        value: $(params.SOURCE_URL)
    - name: build-app
      runAfter: ["source-scan"]
      taskRef:
        name: BUILD_TASK_NAME
      params:
      - name: IMAGE_NAME
        value: $(params.IMAGE_NAME)
      - name: IMAGE_TAG
        value: $(params.IMAGE_TAG)
      - name: SOURCE_URL
        value: $(params.SOURCE_URL)
      workspaces:
      - name: source
        workspace: shared-data
    - name: deploy-to-cluster
      runAfter: ["build-app"]
      taskSpec:
        params:
        - name: IMAGE_URL
        - name: IMAGE_DIGEST
        steps:
        - name: deploy
          image: bitnami/kubectl:1.28
          script: |
            #!/bin/bash
            set -ex
            echo "üöÄ Deploying application to Kubernetes..."
            
            IMAGE_WITH_DIGEST="$(params.IMAGE_URL)@$(params.IMAGE_DIGEST)"
            echo "Deploying image: $IMAGE_WITH_DIGEST"
            
            # Create deployment
            cat <<DEPLOY | kubectl apply -f -
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: tekton-slsa-demo
              namespace: default
              labels:
                app: tekton-slsa-demo
                slsa-demo: "true"
            spec:
              replicas: 2
              selector:
                matchLabels:
                  app: tekton-slsa-demo
              template:
                metadata:
                  labels:
                    app: tekton-slsa-demo
                  annotations:
                    slsa.dev/provenance-available: "true"
                    tekton.dev/signed: "true"
                spec:
                  containers:
                  - name: app
                    image: $IMAGE_WITH_DIGEST
                    imagePullPolicy: Always
                    ports:
                    - containerPort: 8080
                    env:
                    - name: APP_VERSION
                      value: "IMAGE_TAG_VALUE"
                    - name: SIGNING_METHOD
                      value: "SIGNING_METHOD_VALUE"
                    resources:
                      requests:
                        memory: "64Mi"
                        cpu: "50m"
                      limits:
                        memory: "128Mi"
                        cpu: "100m"
                    readinessProbe:
                      httpGet:
                        path: /health
                        port: 8080
                      initialDelaySeconds: 5
                      periodSeconds: 10
                    livenessProbe:
                      httpGet:
                        path: /health
                        port: 8080
                      initialDelaySeconds: 15
                      periodSeconds: 20
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: tekton-slsa-demo
              namespace: default
              labels:
                app: tekton-slsa-demo
            spec:
              selector:
                app: tekton-slsa-demo
              ports:
              - port: 8080
                targetPort: 8080
                name: http
              type: ClusterIP
            DEPLOY
            
            echo "‚úÖ Application deployed successfully"
            
            # Wait for deployment to be ready
            kubectl rollout status deployment/tekton-slsa-demo --timeout=360s
            
            echo "=== Deployment Status ==="
            kubectl get pods -l app=tekton-slsa-demo
            kubectl get svc tekton-slsa-demo
      params:
      - name: IMAGE_URL
        value: $(tasks.build-app.results.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(tasks.build-app.results.IMAGE_DIGEST)
  params:
  - name: IMAGE_NAME
    value: "ttl.sh/tekton-slsa-demo"
  - name: IMAGE_TAG
    value: "IMAGE_TAG_VALUE"
  - name: SOURCE_URL
    value: "https://github.com/waveywaves/tekton-slsa-demo"
  workspaces:
  - name: shared-data
    persistentVolumeClaim:
      claimName: demo-workspace-pvc
